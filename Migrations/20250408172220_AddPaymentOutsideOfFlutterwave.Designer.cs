// <auto-generated />
using System;
using EntityProject.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EntityProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250408172220_AddPaymentOutsideOfFlutterwave")]
    partial class AddPaymentOutsideOfFlutterwave
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EntityProject.entities.AssetCustomerReasonForNotReceivngOtpatReg", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("bvn")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("createdon")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("reason")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("requestreference")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("user_type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("asset_capital_insurance_customerissues");
                });

            modelBuilder.Entity("EntityProject.entities.BvnValidation", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint");

                    b.Property<string>("BVN")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EMAIL")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FIRSTNAME")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("GENDER")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LASTNAME")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LgaOrigin")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LgaResidence")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MARITALSTATUS")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MIDDLENAME")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NATIONALITY")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PHONENUMBER")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PHONENUMBER2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RESIDENTIALADDRESS")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("STATEORIGIN")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StateResidence")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("asset_capital_insurance_bvn_validation");
                });

            modelBuilder.Entity("EntityProject.entities.ClientBank", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("AccountName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("BankId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("createdon")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("asset_capital_insurance_clientbank");
                });

            modelBuilder.Entity("EntityProject.entities.CustomerDataNotFromBvn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ChannelId")
                        .HasColumnName("channelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("createdon")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phonenumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumberNotFromBvn")
                        .HasColumnName("phonenumberfrombvn")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RegId")
                        .HasColumnName("regid")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnName("username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserType")
                        .HasColumnName("user_type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("created_at")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("asset_capital_insurance_custdatanotfrombvn");
                });

            modelBuilder.Entity("EntityProject.entities.CustomerDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int>("ChannelId")
                        .HasColumnName("channelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("createdon")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Device")
                        .HasColumnName("device")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("LoginStatus")
                        .HasColumnName("login_status")
                        .HasColumnType("int");

                    b.Property<string>("Session")
                        .HasColumnName("session")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TrackDevice")
                        .HasColumnName("track_device")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnName("username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserType")
                        .HasColumnName("user_type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("created_at")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("asset_capital_insurance_customerdevice");
                });

            modelBuilder.Entity("EntityProject.entities.HistoricalPerformance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("createdon")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PortfolioId")
                        .HasColumnName("portfolio_id")
                        .HasColumnType("int");

                    b.Property<string>("ProductBy")
                        .HasColumnName("productby")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updatedon")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Year")
                        .HasColumnName("year")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("yield")
                        .HasColumnName("yield")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("portfolio_historicalperformance");
                });

            modelBuilder.Entity("EntityProject.entities.IdCard", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("createdon")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Filepath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("approvalstatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("inititated")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("asset_capital_insurance_idcard");
                });

            modelBuilder.Entity("EntityProject.entities.MobileDevice", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int>("ChannelId")
                        .HasColumnName("channelId")
                        .HasColumnType("int");

                    b.Property<string>("DeviceId")
                        .HasColumnName("device")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeviceName")
                        .HasColumnName("device_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeviceToken")
                        .HasColumnName("device_token")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("UserType")
                        .HasColumnName("user_type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("created_at")
                        .HasColumnName("createdon")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.ToTable("asset_capital_insurance_mobile_device");
                });

            modelBuilder.Entity("EntityProject.entities.OtpSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("createdon")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Otp")
                        .HasColumnName("otp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OtpType")
                        .HasColumnName("otp_type")
                        .HasColumnType("int");

                    b.Property<string>("Session")
                        .HasColumnName("session")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("UserType")
                        .HasColumnName("user_type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.Property<int>("ucid")
                        .HasColumnName("ucid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("asset_capital_insurance_otp_session");
                });

            modelBuilder.Entity("EntityProject.entities.PaymentNotificationOutsideOfFlutterwave", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("BankName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PaymentReference")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Session")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("paymentnotificationoutsideofflutterwave");
                });

            modelBuilder.Entity("EntityProject.entities.PinRequestChange", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<bool>("ApprovalStatus")
                        .HasColumnName("approvalstatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Comment")
                        .HasColumnName("request")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("UserId")
                        .HasColumnName("userid")
                        .HasColumnType("bigint");

                    b.Property<string>("UserType")
                        .HasColumnName("user_type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("initiated")
                        .HasColumnName("initiated")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.ToTable("asset_capital_insurance_pinrequestchange");
                });

            modelBuilder.Entity("EntityProject.entities.Registration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<int>("AccountOpened")
                        .HasColumnName("AccountOpened")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Bvn")
                        .HasColumnName("bvn")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Channelid")
                        .HasColumnName("channelid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("createdon")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerId")
                        .HasColumnName("customerId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeviceId")
                        .HasColumnName("deviceId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Devicename")
                        .HasColumnName("devicename")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nin")
                        .HasColumnName("nin")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ProfiledOpened")
                        .HasColumnName("ProfiledOpened")
                        .HasColumnType("int");

                    b.Property<string>("RequestReference")
                        .HasColumnName("RequestReference")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnName("username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserType")
                        .HasColumnName("user_type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("ValidBvn")
                        .HasColumnName("validbvn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("birth_date")
                        .HasColumnName("birth_date")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("email")
                        .HasColumnName("email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("employerCode")
                        .HasColumnName("employerCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("gender")
                        .HasColumnName("gender")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("idCountry")
                        .HasColumnName("idCountry")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("idLga")
                        .HasColumnName("idLga")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("idReligion")
                        .HasColumnName("idreligion")
                        .HasColumnType("int");

                    b.Property<string>("idState")
                        .HasColumnName("idState")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("maidenName")
                        .HasColumnName("maiden_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("maritalStatus")
                        .HasColumnName("marital_status")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("occupationId")
                        .HasColumnName("occupationId")
                        .HasColumnType("int");

                    b.Property<string>("otherNames")
                        .HasColumnName("othernames")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("phoneNumber")
                        .HasColumnName("phonenumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("sourceOfFund")
                        .HasColumnName("sourceOfFund")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("title")
                        .HasColumnName("title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("transpin")
                        .HasColumnName("transpin")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("asset_capital_insurance_registration");
                });

            modelBuilder.Entity("EntityProject.entities.RegistrationOtpSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("createdon")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Otp")
                        .HasColumnName("otp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OtpType")
                        .HasColumnName("otp_type")
                        .HasColumnType("int");

                    b.Property<string>("Session")
                        .HasColumnName("session")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserType")
                        .HasColumnName("user_type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("bvn")
                        .HasColumnName("bvn")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("asset_capital_insurance_registration_otp_session");
                });

            modelBuilder.Entity("EntityProject.entities.RegistrationSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int>("ChannelId")
                        .HasColumnName("channelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("createdon")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RegId")
                        .HasColumnName("reg_id")
                        .HasColumnType("int");

                    b.Property<string>("Session")
                        .HasColumnName("session")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("UserType")
                        .HasColumnName("user_type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("asset_capital_insurance_reg_session");
                });

            modelBuilder.Entity("EntityProject.entities.Signature", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("createdon")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Filepath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("approvalstatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("inititated")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("asset_capital_insurance_signature");
                });

            modelBuilder.Entity("EntityProject.entities.TMMFDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("AboutTMMF")
                        .HasColumnName("abouttmmf")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("BidPrice")
                        .HasColumnName("bidprice")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("createdon")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HistoricalPerformance")
                        .HasColumnName("historicalperformance")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HowItWorks")
                        .HasColumnName("howitworks")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IncomeDistribution")
                        .HasColumnName("incomedistribution")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ManagementFee")
                        .HasColumnName("managementfee")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OfferPrice")
                        .HasColumnName("offerprice")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProductBy")
                        .HasColumnName("productby")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProductName")
                        .HasColumnName("productname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Suitability")
                        .HasColumnName("suitability")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updatedon")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("yearTilDate")
                        .HasColumnName("yeartildate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("TMMF");
                });

            modelBuilder.Entity("EntityProject.entities.UserCredentials", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("createdon")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TemporaryPIn")
                        .HasColumnName("temporarypin")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("UserType")
                        .HasColumnName("user_type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("credential")
                        .HasColumnName("credential")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("credentialtype")
                        .HasColumnName("credential_type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("retries")
                        .HasColumnName("retries")
                        .HasColumnType("int");

                    b.Property<int>("ucid")
                        .HasColumnName("ucid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("asset_capital_insurance_user_credentials");
                });

            modelBuilder.Entity("EntityProject.entities.UserSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<int>("ChannelId")
                        .HasColumnName("channelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastActivity")
                        .HasColumnName("last_activity")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Session")
                        .HasColumnName("session")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("UserType")
                        .HasColumnName("user_type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("ucid")
                        .HasColumnName("ucid")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("asset_capital_insurance_user_session");
                });

            modelBuilder.Entity("EntityProject.entities.Users", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Bvn")
                        .HasColumnName("bvn")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ChannelId")
                        .HasColumnName("channelId")
                        .HasColumnType("int");

                    b.Property<long>("ClientUniqueRef")
                        .HasColumnName("client_unique_ref")
                        .HasColumnType("bigint");

                    b.Property<string>("Customerid")
                        .HasColumnName("customerid")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NIN")
                        .HasColumnName("nin")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phonenumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProfilePic")
                        .HasColumnName("picture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnName("username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserType")
                        .HasColumnName("user_type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.ToTable("asset_capital_insurance_user");
                });

            modelBuilder.Entity("EntityProject.entities.UtilityBill", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("createdon")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Filepath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("approvalstatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("inititated")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("asset_capital_insurance_utilitybill");
                });
#pragma warning restore 612, 618
        }
    }
}
